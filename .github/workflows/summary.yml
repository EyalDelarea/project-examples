name: "JobSummaries"
on: push

permissions:
  id-token: write
  contents: read

env:
  JFROG_CLI_LOG_LEVEL: DEBUG
  DOCKER_REPO: eyalde-docker-local
  DOCKER_TAG: multi-lini:2

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JFROG_CLI_LOG_LEVEL: DEBUG
          JF_PROJECT: jobsummary

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker build
        run: |
          cd docker-oci-examples/fat-manifest-example
          echo ${{ secrets.JF_PASSWORD }} | docker login ${{ vars.JF_URL }} -u ${{ secrets.JF_USER }} --password-stdin
          docker buildx install
          docker buildx create --use --name mybuilder --driver docker-container
          docker buildx build --platform=linux/amd64,linux/arm64,linux/arm/v7 --tag=soleng.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.DOCKER_TAG }} -f=Dockerfile.Fatmanifest --metadata-file=build-metadata --push .
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file build-metadata
          docker buildx uninstall

      - name: Docker Scan
        run: |
          jf docker pull soleng.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.DOCKER_TAG }}
          jf docker scan --vuln=true soleng.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.DOCKER_TAG }}

      - name: Npm build
        run: |
          cd npm-example
          jf npm-config --repo-resolve=npm-eyalde --repo-deploy=npm-eyalde
          jf npm install

      - name: Publish build info
        run: |
          jf rt bce
          jf rt bp

#      - name: Scan build info
#        run: |
#          jf bs --fail=false --vuln